// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	parkingslot "parkify-BE/features/parkingslot"

	mock "github.com/stretchr/testify/mock"
)

// ParkingSlotModel is an autogenerated mock type for the ParkingSlotModel type
type ParkingSlotModel struct {
	mock.Mock
}

// Add provides a mock function with given fields: email, newSlot
func (_m *ParkingSlotModel) Add(email string, newSlot parkingslot.ParkingSlot) error {
	ret := _m.Called(email, newSlot)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, parkingslot.ParkingSlot) error); ok {
		r0 = rf(email, newSlot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AllParkingSlot provides a mock function with given fields: email
func (_m *ParkingSlotModel) AllParkingSlot(email string) ([]parkingslot.ParkingSlot, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for AllParkingSlot")
	}

	var r0 []parkingslot.ParkingSlot
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]parkingslot.ParkingSlot, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) []parkingslot.ParkingSlot); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]parkingslot.ParkingSlot)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: email, parkingSlotID
func (_m *ParkingSlotModel) Delete(email string, parkingSlotID string) error {
	ret := _m.Called(email, parkingSlotID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, parkingSlotID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Edit provides a mock function with given fields: email, parkingSlotID, editSlot
func (_m *ParkingSlotModel) Edit(email string, parkingSlotID string, editSlot parkingslot.ParkingSlot) error {
	ret := _m.Called(email, parkingSlotID, editSlot)

	if len(ret) == 0 {
		panic("no return value specified for Edit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, parkingslot.ParkingSlot) error); ok {
		r0 = rf(email, parkingSlotID, editSlot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewParkingSlotModel creates a new instance of ParkingSlotModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParkingSlotModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *ParkingSlotModel {
	mock := &ParkingSlotModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
