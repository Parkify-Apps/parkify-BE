// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	reservation "parkify-BE/features/reservation"

	mock "github.com/stretchr/testify/mock"
)

// ReservationModel is an autogenerated mock type for the ReservationModel type
type ReservationModel struct {
	mock.Mock
}

// Create provides a mock function with given fields: email, newData
func (_m *ReservationModel) Create(email string, newData reservation.Reservation) (reservation.Reservation, error) {
	ret := _m.Called(email, newData)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 reservation.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, reservation.Reservation) (reservation.Reservation, error)); ok {
		return rf(email, newData)
	}
	if rf, ok := ret.Get(0).(func(string, reservation.Reservation) reservation.Reservation); ok {
		r0 = rf(email, newData)
	} else {
		r0 = ret.Get(0).(reservation.Reservation)
	}

	if rf, ok := ret.Get(1).(func(string, reservation.Reservation) error); ok {
		r1 = rf(email, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistory provides a mock function with given fields: email
func (_m *ReservationModel) GetHistory(email string) ([]reservation.ReservationResponse, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 []reservation.ReservationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]reservation.ReservationResponse, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) []reservation.ReservationResponse); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reservation.ReservationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationInfo provides a mock function with given fields: email, reservationID
func (_m *ReservationModel) GetReservationInfo(email string, reservationID string) (reservation.ReservationResponse, error) {
	ret := _m.Called(email, reservationID)

	if len(ret) == 0 {
		panic("no return value specified for GetReservationInfo")
	}

	var r0 reservation.ReservationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (reservation.ReservationResponse, error)); ok {
		return rf(email, reservationID)
	}
	if rf, ok := ret.Get(0).(func(string, string) reservation.ReservationResponse); ok {
		r0 = rf(email, reservationID)
	} else {
		r0 = ret.Get(0).(reservation.ReservationResponse)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, reservationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReservationModel creates a new instance of ReservationModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReservationModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReservationModel {
	mock := &ReservationModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
