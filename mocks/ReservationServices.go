// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	reservation "parkify-BE/features/reservation"
)

// ReservationServices is an autogenerated mock type for the ReservationServices type
type ReservationServices struct {
	mock.Mock
}

// Create provides a mock function with given fields: token, newData
func (_m *ReservationServices) Create(token *jwt.Token, newData reservation.Reservation) (reservation.Reservation, error) {
	ret := _m.Called(token, newData)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 reservation.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, reservation.Reservation) (reservation.Reservation, error)); ok {
		return rf(token, newData)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, reservation.Reservation) reservation.Reservation); ok {
		r0 = rf(token, newData)
	} else {
		r0 = ret.Get(0).(reservation.Reservation)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, reservation.Reservation) error); ok {
		r1 = rf(token, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistory provides a mock function with given fields: token
func (_m *ReservationServices) GetHistory(token *jwt.Token) ([]reservation.ReservationResponse, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 []reservation.ReservationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token) ([]reservation.ReservationResponse, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) []reservation.ReservationResponse); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reservation.ReservationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationInfo provides a mock function with given fields: token, reservationID
func (_m *ReservationServices) GetReservationInfo(token *jwt.Token, reservationID string) (reservation.ReservationResponse, error) {
	ret := _m.Called(token, reservationID)

	if len(ret) == 0 {
		panic("no return value specified for GetReservationInfo")
	}

	var r0 reservation.ReservationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, string) (reservation.ReservationResponse, error)); ok {
		return rf(token, reservationID)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, string) reservation.ReservationResponse); ok {
		r0 = rf(token, reservationID)
	} else {
		r0 = ret.Get(0).(reservation.ReservationResponse)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, string) error); ok {
		r1 = rf(token, reservationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReservationServices creates a new instance of ReservationServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReservationServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReservationServices {
	mock := &ReservationServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
