// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	parking "parkify-BE/features/parking"

	mock "github.com/stretchr/testify/mock"

	parkingslot "parkify-BE/features/parkingslot"

	reservation "parkify-BE/features/reservation"

	transaction "parkify-BE/features/transaction"
)

// TransactionModel is an autogenerated mock type for the TransactionModel type
type TransactionModel struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: newData, reservationID
func (_m *TransactionModel) CreateTransaction(newData transaction.Transaction, reservationID uint) (transaction.Transaction, error) {
	ret := _m.Called(newData, reservationID)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction, uint) (transaction.Transaction, error)); ok {
		return rf(newData, reservationID)
	}
	if rf, ok := ret.Get(0).(func(transaction.Transaction, uint) transaction.Transaction); ok {
		r0 = rf(newData, reservationID)
	} else {
		r0 = ret.Get(0).(transaction.Transaction)
	}

	if rf, ok := ret.Get(1).(func(transaction.Transaction, uint) error); ok {
		r1 = rf(newData, reservationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *TransactionModel) Get(id int) (transaction.Transaction, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (transaction.Transaction, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) transaction.Transaction); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(transaction.Transaction)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIDByOrderID provides a mock function with given fields: orderID
func (_m *TransactionModel) GetIDByOrderID(orderID string) (transaction.Transaction, error) {
	ret := _m.Called(orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetIDByOrderID")
	}

	var r0 transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (transaction.Transaction, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) transaction.Transaction); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Get(0).(transaction.Transaction)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParking provides a mock function with given fields: id
func (_m *TransactionModel) GetParking(id uint) (parking.Parking, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetParking")
	}

	var r0 parking.Parking
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (parking.Parking, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) parking.Parking); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(parking.Parking)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParkingSlot provides a mock function with given fields: id
func (_m *TransactionModel) GetParkingSlot(id uint) (parkingslot.ParkingSlot, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetParkingSlot")
	}

	var r0 parkingslot.ParkingSlot
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (parkingslot.ParkingSlot, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) parkingslot.ParkingSlot); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(parkingslot.ParkingSlot)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservation provides a mock function with given fields: id
func (_m *TransactionModel) GetReservation(id uint) (reservation.Reservation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetReservation")
	}

	var r0 reservation.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (reservation.Reservation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) reservation.Reservation); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(reservation.Reservation)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAvailable provides a mock function with given fields: newData, slotID
func (_m *TransactionModel) UpdateAvailable(newData parkingslot.ParkingSlot, slotID uint) error {
	ret := _m.Called(newData, slotID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAvailable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(parkingslot.ParkingSlot, uint) error); ok {
		r0 = rf(newData, slotID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSuccess provides a mock function with given fields: newData, orderID
func (_m *TransactionModel) UpdateSuccess(newData transaction.Transaction, orderID uint) error {
	ret := _m.Called(newData, orderID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSuccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction, uint) error); ok {
		r0 = rf(newData, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionModel creates a new instance of TransactionModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionModel {
	mock := &TransactionModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
