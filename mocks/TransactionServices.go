// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	transaction "parkify-BE/features/transaction"
)

// TransactionServices is an autogenerated mock type for the TransactionServices type
type TransactionServices struct {
	mock.Mock
}

// Get provides a mock function with given fields: id, token
func (_m *TransactionServices) Get(id int, token *jwt.Token) (interface{}, error) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *jwt.Token) (interface{}, error)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(int, *jwt.Token) interface{}); ok {
		r0 = rf(id, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, *jwt.Token) error); ok {
		r1 = rf(id, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentCallback provides a mock function with given fields: payment
func (_m *TransactionServices) PaymentCallback(payment transaction.CallbackRequest) error {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for PaymentCallback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(transaction.CallbackRequest) error); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transaction provides a mock function with given fields: payment, token
func (_m *TransactionServices) Transaction(payment transaction.PaymentRequest, token *jwt.Token) (interface{}, error) {
	ret := _m.Called(payment, token)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.PaymentRequest, *jwt.Token) (interface{}, error)); ok {
		return rf(payment, token)
	}
	if rf, ok := ret.Get(0).(func(transaction.PaymentRequest, *jwt.Token) interface{}); ok {
		r0 = rf(payment, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(transaction.PaymentRequest, *jwt.Token) error); ok {
		r1 = rf(payment, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionServices creates a new instance of TransactionServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionServices {
	mock := &TransactionServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
