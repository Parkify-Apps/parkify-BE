// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	parkingslot "parkify-BE/features/parkingslot"
)

// ParkingSlotServices is an autogenerated mock type for the ParkingSlotServices type
type ParkingSlotServices struct {
	mock.Mock
}

// Add provides a mock function with given fields: token, newSlot
func (_m *ParkingSlotServices) Add(token *jwt.Token, newSlot parkingslot.ParkingSlot) error {
	ret := _m.Called(token, newSlot)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, parkingslot.ParkingSlot) error); ok {
		r0 = rf(token, newSlot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AllParkingSlot provides a mock function with given fields: token
func (_m *ParkingSlotServices) AllParkingSlot(token *jwt.Token) ([]parkingslot.ParkingSlot, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for AllParkingSlot")
	}

	var r0 []parkingslot.ParkingSlot
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token) ([]parkingslot.ParkingSlot, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) []parkingslot.ParkingSlot); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]parkingslot.ParkingSlot)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: token, parkingSlotID
func (_m *ParkingSlotServices) Delete(token *jwt.Token, parkingSlotID string) error {
	ret := _m.Called(token, parkingSlotID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, string) error); ok {
		r0 = rf(token, parkingSlotID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Edit provides a mock function with given fields: token, parkingSlotID, editSlot
func (_m *ParkingSlotServices) Edit(token *jwt.Token, parkingSlotID string, editSlot parkingslot.ParkingSlot) error {
	ret := _m.Called(token, parkingSlotID, editSlot)

	if len(ret) == 0 {
		panic("no return value specified for Edit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, string, parkingslot.ParkingSlot) error); ok {
		r0 = rf(token, parkingSlotID, editSlot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewParkingSlotServices creates a new instance of ParkingSlotServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParkingSlotServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *ParkingSlotServices {
	mock := &ParkingSlotServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
