// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	parking "parkify-BE/features/parking"

	parkingslot "parkify-BE/features/parkingslot"
)

// ParkingServices is an autogenerated mock type for the ParkingServices type
type ParkingServices struct {
	mock.Mock
}

// GetAllParking provides a mock function with given fields: userID
func (_m *ParkingServices) GetAllParking(userID uint) ([]parking.Parking, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllParking")
	}

	var r0 []parking.Parking
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]parking.Parking, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) []parking.Parking); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]parking.Parking)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSlotByID provides a mock function with given fields: parkingID
func (_m *ParkingServices) GetAllSlotByID(parkingID uint) ([]parkingslot.ParkingSlot, error) {
	ret := _m.Called(parkingID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSlotByID")
	}

	var r0 []parkingslot.ParkingSlot
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]parkingslot.ParkingSlot, error)); ok {
		return rf(parkingID)
	}
	if rf, ok := ret.Get(0).(func(uint) []parkingslot.ParkingSlot); ok {
		r0 = rf(parkingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]parkingslot.ParkingSlot)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(parkingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParking provides a mock function with given fields: token, parkingID
func (_m *ParkingServices) GetParking(token *jwt.Token, parkingID uint) (parking.Parking, error) {
	ret := _m.Called(token, parkingID)

	if len(ret) == 0 {
		panic("no return value specified for GetParking")
	}

	var r0 parking.Parking
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) (parking.Parking, error)); ok {
		return rf(token, parkingID)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) parking.Parking); ok {
		r0 = rf(token, parkingID)
	} else {
		r0 = ret.Get(0).(parking.Parking)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, uint) error); ok {
		r1 = rf(token, parkingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPicture provides a mock function with given fields: parkingID
func (_m *ParkingServices) GetPicture(parkingID int) (parking.Parking, error) {
	ret := _m.Called(parkingID)

	if len(ret) == 0 {
		panic("no return value specified for GetPicture")
	}

	var r0 parking.Parking
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (parking.Parking, error)); ok {
		return rf(parkingID)
	}
	if rf, ok := ret.Get(0).(func(int) parking.Parking); ok {
		r0 = rf(parkingID)
	} else {
		r0 = ret.Get(0).(parking.Parking)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(parkingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostParking provides a mock function with given fields: token, newData
func (_m *ParkingServices) PostParking(token *jwt.Token, newData parking.Parking) error {
	ret := _m.Called(token, newData)

	if len(ret) == 0 {
		panic("no return value specified for PostParking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, parking.Parking) error); ok {
		r0 = rf(token, newData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateParking provides a mock function with given fields: parkingID, token, newData
func (_m *ParkingServices) UpdateParking(parkingID int, token *jwt.Token, newData parking.Parking) error {
	ret := _m.Called(parkingID, token, newData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateParking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *jwt.Token, parking.Parking) error); ok {
		r0 = rf(parkingID, token, newData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewParkingServices creates a new instance of ParkingServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParkingServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *ParkingServices {
	mock := &ParkingServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
